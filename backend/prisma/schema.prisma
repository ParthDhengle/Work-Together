datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-py"
  output   = "./prisma"  // Generates client in backend/prisma/
}

// Enums for task and worker statuses, priorities, and teams
enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum WorkerStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Team {
  BUSINESS_AND_MANAGEMENT
  DESIGN_AND_ARCHITECTURE
  FRONTEND_DEVELOPMENT
  BACKEND_DEVELOPMENT
  DATABASE_DEVELOPMENT
  FULLSTACK_DEVELOPMENT
  SUPPORT_FOR_TESTING_AND_DEPLOYMENT
}

// Projects table: Stores project details submitted by users
model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus @default(PENDING)
  tasks       Task[]        // One-to-many relation with tasks
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Tasks table: Stores tasks (some generated by Gemini API)
model Task {
  id              String     @id @default(uuid())
  projectId       String
  project         Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  skillRequirement String?    // E.g., "React", "Python"
  priority        Priority   @default(MEDIUM)
  estimatedDuration Int       // In days, from Gemini API
  deadline        DateTime   // Must be â‰¤ project.endDate
  assignedTeam    Team       // Team required for the task
  status          TaskStatus @default(PENDING)
  assignedWorkerId String?   // Nullable until assigned
  assignedWorker  Worker?    @relation(fields: [assignedWorkerId], references: [id], onDelete: SetNull)
  assignments     Assignment[] // History of assignments
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

// Workers table: Stores worker node details
model Worker {
  id             String       @id @default(uuid())
  status         WorkerStatus @default(AVAILABLE)
  capacity       Int          @default(4) // Max concurrent tasks
  teams          Team[]       // Array of teams the worker supports
  lastHealthCheck DateTime?   // Updated by heartbeats
  tasks          Task[]       // Tasks currently assigned
  assignments    Assignment[] // History of assignments
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Assignments table: Tracks task assignments to workers
model Assignment {
  id          String     @id @default(uuid())
  taskId      String
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  workerId    String
  worker      Worker     @relation(fields: [workerId], references: [id], onDelete: Cascade)
  assignedAt  DateTime   @default(now())
  completedAt DateTime?  // Nullable until completed
  status      TaskStatus @default(ASSIGNED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Logs table: Stores system events for monitoring
model Log {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  level     String   // E.g., "info", "warning", "error"
  message   String
  component String   // E.g., "scheduler", "worker", "api"
  createdAt DateTime @default(now())
}